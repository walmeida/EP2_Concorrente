/* ******************************************************* */
/* Aluno: Jefferson Serafim Ascaneo   NUSP 6431284         */
/* Aluno: Wallace Faveron de Almeida  NUSP 6879609 	       */
/* MAC0438 - 2012 - IME-USP	                               */
/* Prof. Daniel Macedo Bastista                            */
/* EP2 - Menores Caminhos                                  */
/* Programa testado e compilado no Ubuntu 10.10	           */
/* ******************************************************* */

O Exercício Programa realiza a busca de um número arbitrário
de caminhos entre a origem e todos os demais pontos de uma 
rede, representada em forma de um grafo conexo, utilizando
múltiplas threads.
A implementação foi feita em linguagem C++. Dentre os objetivos 
principais do exercício está a utilização de barreiras de
sincronização. 

Juntamente ao programa, foi elaborado um Makefile. 
Para compilar o código-fonte, basta digitar em um terminal:

make

Para executar, basta digitar o seguinte comando na pasta bin:

./caminhosminimos <número de caminhos mínimos> <arquivo de entrada> [-debug] 

onde: 
"número de caminhos mínimos" é um valor que representa o número
de caminhos mínimos encontrados entre dois vértices;
"arquivo de entrada" é o nome correspondente ao arquivo de entrada;
"-debug" é um parâmetro opcional que ativao modo 'debug';

O resultado obtido para o arquivo de entrada proposto no enunciado
encontra-se em "relatorio.pdf".

A barreira utilizada no exercício é do tipo barreira de disseminação.
Sua implementação foi feita com base no modelo proposto na principal
bibliografia do curso e nos slides das aulas. Pode ser visualizada
no arquivo "barrier.cc", especificamente entre as linhas 5 e 16
(inicialização), e entre as linhas 22 e 28 (a barreira).


Resumo do funcionamento do EP:

A cada iteração, as threads processam caminhos de um mesmo tamanho.
Processam caminhos de tamanho 1 na primeira iteração, tamanho 2 na
segunda, e assim por diante. Inicialmente, existe um único "caminho"
que é o que contém apenas o vértice 0.

Ao processar um caminho, a thread (função find_path no main.cc) tenta 
ir adicionando vértices vizinhos ao último vértice do caminho. Assim ela
vai criando vários outros caminhos de tamanho maior (um vértice a mais),
e verifica se o vértice de destino já possui o mínimo de caminhos que 
precisa. Além disso, adiciona os caminhos encontrados na lista de 
caminhos a serem processados (só serão processados na próxima iteração).

A barreira serve para garantir que todas as threads estão processando
caminhos de mesmo tamanho, assim eles são adicionados na ordem de 
tamanho nos vértices de destino.
